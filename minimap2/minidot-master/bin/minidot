#!/usr/bin/env bash
# Author: Thomas Hackl, thackl@lim4.de
# Version: 0.4.0

## subs
usage(){
cat <<EOF
Usage:
  minidot [OPTS] FASTA [FASTA ..]

Compute and plot dotplots.
  -o OUT         output name and format: pdf, png [minidot.pdf]
  -M MAPPER      mapper path and binary [minimap]
  -m MODE        mapper mode: fast, sensitive, auto (dep. on input size) or
                 pass-through parameters as quoted string [auto]
  -T TMP         path to tmp file location [/tmp]

EOF
"$RSCRIPT" -h 2>/dev/null | grep '^  -' | grep -vP -- '^  -[hilo]|  --argparse'

cat <<EOF

  -h, --help     show help
  -V, --version  show version

single FASTA: run all-vs-all sequences.
multiple FASTAS: run all-vs-all FASTAS.

EOF
exit 0;
}

log(){
    echo [$(date +"%T")] $@ >&2
}
logs(){
    echo -n [$(date +"%T")] $@ >&2
}
loge(){
    echo " "$@ >&2
}

check_bin(){
    logs $1 ..
    if [[ $1 == */* ]]; then
        [ -x $1 ] || { loge failed; log "$1 not found or executable"; exit 1; }
    else
        hash $1 || { loge failed; log "$1 required in PATH"; exit 1; }
    fi;
    loge ok
}

mode2opts(){
    if [ "$MOPT" == 'auto' ]; then
        LSUM=$(awk '{sum+=$2} END {print sum}' <$TLEN)
        [ "$LSUM" -gt 50000000 ] && MOPT='fast' || MOPT='sensitive'
    fi;

    logs mode: "$MOPT ($LSUM bp)"
    [ "$MOPT" == 'fast' ] && MOPT='-L 500 -c 15'
    [ "$MOPT" == 'sensitive' ] && MOPT='-g 100 -k 12 -w 5'
    loge '"'"$MOPT"'"'
}


# get dir
# ugly, but it works for Brian in the bbmap package
pushd . > /dev/null
DIR="${BASH_SOURCE[0]}"
while [ -h "$DIR" ]; do
  cd "$(dirname "$DIR")"
  DIR="$(readlink "$(basename "$DIR")")"
done
cd "$(dirname "$DIR")"
DIR="$(pwd)/"
popd > /dev/null

SCRIPT=$(basename ${BASH_SOURCE})
RSCRIPT="$DIR"/../R/minidot.R

## prep
[[ $# -eq 0 ]] && usage;

# Execute getopt
ARGS=`getopt -n "$SCRIPT" \
 -o "o:M:m:w:hVST" \
 -l "help,version,no-self,title:,theme:,width:" \
    -- "$@"`

# Bad arguments
[ $? -ne 0 ] && exit 1;

# A little magic
eval set -- "$ARGS"

# defaults
MBIN=minimap
MOPT='auto' # TODO: reset if not minimap
OPRE=minidot
TMP=/tmp

# Now go through all the options
RARGS=""
while true; do
    case "$1" in
        -o) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); OPRE="$2"; shift 2;;
        -M) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); MBIN="$2"; shift 2;;
        -m) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); MOPT="$2"; shift 2;;
        -T) [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1); TMP="$2"; shift 2;;
        -h|--help) usage && exit 0;;
        -V|--version) grep -m1 '^# Version' "$DIR"/$SCRIPT | sed "s/.*Version:\s*/$SCRIPT-/"; exit 0;;
        --) shift; break;;
        *) RARGS="$RARGS $1"; shift;; # echo "$1: Unknown option" 1>&2 && exit 1;;
    esac
done

## test pass-through options
echo  "$RARGS"
"$RSCRIPT" --argparse $RARGS
[ $? -ne 0 ] && { loge failed; >&2; exit 1; }

## check for args
[[ $# -eq 0 ]] && usage;

# check_bin
check_bin $MBIN
check_bin samtools

# files
OSUF="${OPRE##*.}"
[ "$OSUF" == "$OPRE" ] && OSUF=pdf
OPRE="${OPRE%.*}"
PAF=$OPRE.paf
TFA=$TMP/$OPRE.fa
TLEN=$TMP/$OPRE.len
TML=$TMP/$OPRE-map.log # temp mapper log
TRL=$TMP/$OPRE-plot.log # temp mapper log

echo -n '' >$PAF;
echo -n '' >$TFA;
echo -n '' >$TLEN;
echo -n '' >$TML;



if [[ -z $2 ]]; then
    # single fasta - assume one contig per sample
    FA=$1;
    ID=$(basename $FA);
    ID=${ID%.f*};
    samtools faidx $FA; # lengths of contigs
    cut -f 1,2 $FA.fai > $TLEN;
    rm $FA.fai

    mode2opts

    logs mapping ..
    $MBIN $MOPT $1 $1 >> $PAF 2>> $TML;
    [ $? -ne 0 ] && { loge failed; cat $TML >&2; exit 1; }
    loge done

else
    # multiple fasta - each file is a sample
    # merge fastas

    logs prepping ..
    for FA in $@; do
        ID=$(basename $FA);
        ID=${ID%.f*};
        # ID=${ID/[:\/]/_}; # need : for split in R
        (echo ">$ID"; grep -v '^>' $FA | tr -d '\n' | fold; echo '') >> $TFA;
        samtools faidx $FA; # lengths of contigs
        cut -f 2 $FA.fai | sed 's/.*/'$ID'\t&/' >> $TLEN;
        rm $FA.fai
    done;
    [ $? -ne 0 ] && { loge failed; exit 1; }
    loge done;

    mode2opts

    logs mapping ..
    $MBIN $MOPT $TFA $TFA >> $PAF 2>> $TML;
    [ $? -ne 0 ] && { loge failed; cat $TML >&2; exit 1; }
    loge done

fi;

log plotting;
"$RSCRIPT" $RARGS -i $PAF -l $TLEN -o $OPRE.$OSUF # R messages to fule
[ $? -ne 0 ] && { loge failed; >&2; exit 1; }
log " .. done ($OPRE.$OSUF)"
